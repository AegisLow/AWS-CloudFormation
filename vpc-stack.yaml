AWSTemplateFormatVersion: '2010-09-09'
Metadata: 
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template VPC_EC2_Instance_With_Multiple_Static_IPAddresses:
  Sample template showing how to create an instance with a single network interface
  and multiple static IP addresses in an existing VPC. It assumes you have already
  created a VPC. **WARNING** This template creates an Amazon EC2 instance. You will
  be billed for the AWS resources used if you create a stack from this template.'
Parameters:
  # Ownership
  Owner:
    Type: String
    Default: Innovax Systems
  Project:
    Type: String
    Default: OpsCentral-SIT
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: SIT
  CreatedBy:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: CloudFormation  
  AStackName:
    Type: String
    Description: Default Stack Name Definition
    Default: SIT-OpsCentral
  RoleStackName:
    Type: String
    Description: Stack Name for the Cloudformation that create the IAM-Roles
    Default: SIT-IAM-Roles
  NetworkStackName:
    Type: String
    Description: Name of the network stack
    Default: SIT-Network
  SubnetStackName:
    Type: String
    Description: Name of the public cluster stack name
    Default: SIT-Subnets
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 172.86.0.0/16
  AvailabilityZone1:
    Type: String
    Default: a
    AllowedValues:
    - a
    - b
    - c
  AvailabilityZone2:
    Type: String
    Default: b
    AllowedValues:
    - a
    - b
    - c
  AvailabilityZone3:
    Type: String
    Default: c
    AllowedValues:
    - a
    - b
    - c
  # Rule Numbers
  AllowVpcSubnetsRuleNumber:
    Type: Number
    Default: '100'
  AllowRemoteNetworkPublicRuleNumber:
    Type: Number
    Default: '105'
  AllowICMPPublicRuleNumber:
    Type: Number
    Default: '120'  
  AllowSshPublicRuleNumber:
    Type: Number
    Default: '130'  
  AllowRdpPublicRuleNumber:
    Type: Number
    Default: '131'  
  AllowHttpToPublicRuleNumber:
    Type: Number
    Default: '200'
  AllowHttpsToPublicRuleNumber:
    Type: Number
    Default: '205'
  Allow8080ToPrivateRuleNumber:
    Type: Number
    Default: '210'
  AllowRTPToPublicRuleNumber:
    Type: Number
    Default: '220'
  AllowUDPToPublicRuleNumber:
    Type: Number
    Default: '230'
  AllowUDPVoiceToPublicRuleNumber:
    Type: Number
    Default: '235'
  AllowPBXToPublicRuleNumber:
    Type: Number
    Default: '240'
  AllowVPNforPublicRuleNumber:
    Type: Number
    Default: '250'
  DenyMysqlToPublicRuleNumber:
    Type: Number
    Default: '800'
  DenyOracleToPublicRuleNumber:
    Type: Number
    Default: '805'
  DenyAuroraToPublicRuleNumber:
    Type: Number
    Default: '810'
  DenyNFSToPublicRuleNumber:
    Type: Number
    Default: '815'
  DenyRDPToPublicRuleNumber:
    Type: Number
    Default: '820'
  DenyPostgreToPublicRuleNumber:
    Type: Number
    Default: '825'
  Deny8080ToPublicRuleNumber:
    Type: Number
    Default: '830'
  Deny8443ToPublicRuleNumber:
    Type: Number
    Default: '835'
  AllowReturnTrafficToPublicRuleNumber:
    Type: Number
    Default: '900'
  AllowAllInboundPrivateRuleNumber:
    Type: Number
    Default: '150'
  AllowAllIcmpInboundPrivateRuleNumber:
    Type: Number
    Default: '160'
  AllowAllSshInboundPrivateRuleNumber:
    Type: Number
    Default: '170'
  AllowInboundPrivateRuleNumberHTTPS:
    Type: Number
    Default: '180'
  AllowAllOutboundPublicRuleNumber:
    Type: Number
    Default: '100'
  AllowAllOutboundPrivateRuleNumber:
    Type: Number
    Default: '100'
  ## Public Subnet
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    Default: 172.86.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    Default: 172.86.30.0/24
  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    Default: 172.86.50.0/24  
  ## Private Subnet
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    Default: 172.86.20.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    Default: 172.86.40.0/24
  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    Default: 172.86.60.0/24
  VPCFlowLogsCloudWatchKMSKey:
    AllowedPattern: '^$|^arn:(aws[a-zA-Z-]*)?:kms:[a-z0-9-]+:\d{12}:key\/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'
    ConstraintDescription: 'Key ARN example:  arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'
    Default: 'arn:aws:kms:ap-southeast-1:531170211840:key/c95302df-84f5-446b-a365-035979155e03'
    Description:
      (Optional) KMS Key ARN to use for encrypting the VPC flow logs data. If empty, encryption is enabled with CloudWatch Logs managing the
      server-side encryption keys.
    Type: String
  CreateVPCFlowLogsToCloudWatch:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to true to create VPC flow logs for the VPC and publish them to CloudWatch. If false, VPC flow logs will not be created.
    Type: String
  VPCFlowLogsLogGroupRetention:
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Default: 365
    Description: Number of days to retain the VPC Flow Logs in CloudWatch
    Type: String
  VPCFlowLogsLogFormat:
    AllowedPattern: '^(\$\{[a-z-]+\})$|^((\$\{[a-z-]+\} )*\$\{[a-z-]+\})$'
    Default:
      '${version} ${account-id} ${interface-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${packets} ${bytes} ${start} ${end} ${action}
      ${log-status}'
    Description:
      The fields to include in the flow log record, in the order in which they should appear. Specify the fields using the ${field-id} format,
      separated by spaces. Using the Default Format as the default value.
    Type: String
  VPCFlowLogsMaxAggregationInterval:
    AllowedValues:
      - 60
      - 600
    Default: 600
    Description:
      The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1
      minute) or 600 seconds (10 minutes).
    Type: String
  VPCFlowLogsTrafficType:
    AllowedValues:
      - ACCEPT
      - ALL
      - REJECT
    Default: REJECT
    Description: The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
    Type: String
Conditions:
  VPCFlowLogsCloudWatchKMSKeyCondition: !Not [!Equals [!Ref VPCFlowLogsCloudWatchKMSKey, '']]
  VPCFlowLogsToCloudWatchCondition: !Equals [!Ref 'CreateVPCFlowLogsToCloudWatch', 'true']
Resources:
  ## VPC    
  InnovaxSITVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags: 
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-vpc" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy
  ## SUBNETS  1 Public 1 Private Availability Zone 1
  InnovaxSITPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InnovaxSITVPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref "AvailabilityZone1" ] ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: # Name , Envirnment, Created By 
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", !Ref "AWS::Region", !Ref "AvailabilityZone1", "-public-subnet1"  ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy
  InnovaxSITPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InnovaxSITVPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref "AvailabilityZone1" ] ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags: # Name , Envirnment, Created By 
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", !Ref "AWS::Region", !Ref "AvailabilityZone1", "-private-subnet1"  ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy
  ## SUBNETS  1 Public 1 Private Availability Zone 2
  InnovaxSITPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InnovaxSITVPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref "AvailabilityZone2" ] ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: # Name , Envirnment, Created By 
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", !Ref "AWS::Region", !Ref "AvailabilityZone2", "-public-subnet2"  ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy 
  InnovaxSITPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InnovaxSITVPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref "AvailabilityZone2" ] ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags: # Name , Envirnment, Created By 
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", !Ref "AWS::Region", !Ref "AvailabilityZone2", "-private-subnet2"  ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy
  ## SUBNETS  1 Public 1 Private Availability Zone 3
  InnovaxSITPublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InnovaxSITVPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref "AvailabilityZone3" ] ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags: # Name , Envirnment, Created By 
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", !Ref "AWS::Region", !Ref "AvailabilityZone3", "-public-subnet3"  ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy 
  InnovaxSITPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InnovaxSITVPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref "AvailabilityZone3" ] ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags: # Name , Envirnment, Created By 
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", !Ref "AWS::Region", !Ref "AvailabilityZone3", "-private-subnet3"  ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy
  ## INTERNET GATEWAY
  InnovaxSITInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: # Name , Envirnment, Created By 
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-InternetGateway"  ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - InnovaxSITVPC
    Properties:
      VpcId: !Ref InnovaxSITVPC
      InternetGatewayId: !Ref InnovaxSITInternetGateway
  ## NAT GATEWAY
  InnovaxSITNatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: InnovaxSITNatPublicIP
    Properties: 
      ConnectivityType: public
      SubnetId: !Ref InnovaxSITPublicSubnet3
      AllocationId: !GetAtt InnovaxSITNatPublicIP.AllocationId
  ## ELASTIC IP
  InnovaxSITNatPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: InnovaxSITVPC
    Properties:
      Domain: vpc
  ## ELASTIC IP for VPN Server
  InnovaxSITNatPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: InnovaxSITVPC
    Properties:
      Domain: vpc
  ## Public Subnet Route Table
  InnovaxSITPublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: InnovaxSITVPC
    Properties:
      VpcId: !Ref InnovaxSITVPC
      Tags: # Name , Envirnment, Created By 
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-Public-RouteTable"  ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy
  InnovaxSITPublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - InnovaxSITPublicRouteTable
    - InnovaxSITInternetGateway
    Properties:
      RouteTableId: !Ref InnovaxSITPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InnovaxSITInternetGateway
  InnovaxSITPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - InnovaxSITPublicSubnet1
    - InnovaxSITPublicRouteTable
    Properties:
      SubnetId: !Ref InnovaxSITPublicSubnet1
      RouteTableId: !Ref InnovaxSITPublicRouteTable
  InnovaxSITPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - InnovaxSITPublicSubnet2
    - InnovaxSITPublicRouteTable
    Properties:
      SubnetId: !Ref InnovaxSITPublicSubnet2
      RouteTableId: !Ref InnovaxSITPublicRouteTable
  InnovaxSITPublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - InnovaxSITPublicSubnet3
    - InnovaxSITPublicRouteTable
    Properties:
      SubnetId: !Ref InnovaxSITPublicSubnet3
      RouteTableId: !Ref InnovaxSITPublicRouteTable
  InnovaxSITPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InnovaxSITVPC
      Tags: # Name , Envirnment, Created By 
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-Private-RouteTable"  ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy
  InnovaxSITPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref InnovaxSITNatGateway
      RouteTableId: !Ref InnovaxSITPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
  InnovaxSITPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref InnovaxSITPrivateSubnet1
      RouteTableId: !Ref InnovaxSITPrivateRouteTable
  InnovaxSITPrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref InnovaxSITPrivateSubnet2
        RouteTableId: !Ref InnovaxSITPrivateRouteTable
  InnovaxSITPrivateSubnet3RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref InnovaxSITPrivateSubnet3
        RouteTableId: !Ref InnovaxSITPrivateRouteTable
  ## Public Network ACL
  InnovaxSITPublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: InnovaxSITVPC
    Properties:
      VpcId: !Ref InnovaxSITVPC
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-public-acl" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy
  # Public Network ACL Rules
  InboundPublicNetworkAclAllowVPCSubnets:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowVpcSubnetsRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: '0'
        To: '65535'
  InboundPublicNetworkAclAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowHttpToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundPublicNetworkAclAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowHttpsToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundPublicNetworkAclDenyMssql:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref DenyMysqlToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1433'
        To: '1433'
  InboundPublicNetworkAclDenyPostgre:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref DenyPostgreToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '5432'
        To: '5432'
  InboundPublicNetworkAclDeny8080:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref Allow8080ToPrivateRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8080'
        To: '8080'
  InboundPublicNetworkAclDeny8443:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref Deny8443ToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  InboundPublicNetworkAclDeny8443:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref Deny8443ToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  InboundPublicNetworkAclAllowAllICMP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowICMPPublicRuleNumber
      Icmp :
        Code: '-1'
        Type: '-1'
      Protocol: "1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  InboundPublicNetworkAclAllowAllSsh:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowSshPublicRuleNumber
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundPublicNetworkAclAllowAllRdp:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowRdpPublicRuleNumber
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3389'
        To: '3389'
  InboundPublicNetworkAclAllowReturnTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowReturnTrafficToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535' 
  InboundPublicNetworkAclAllowPBXTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowPBXToPublicRuleNumber
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '5060'
        To: '5060'
  InboundPublicNetworkAclAllowVPNTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowVPNforPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '41160'
        To: '41160'
  InboundPublicNetworkAclAllowRTPTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowRTPToPublicRuleNumber
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '10000'
        To: '20000'
  InboundPublicNetworkAclAllowUDPTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowUDPToPublicRuleNumber
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '41160'
        To: '41170'    
  InboundPublicNetworkAclAllowUDPVoiceTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowUDPVoiceToPublicRuleNumber
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3478'
        To: '3478'        
  OutboundPublicNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPublicNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
      RuleNumber: !Ref AllowAllOutboundPublicRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  # Public NetSubnet Association
  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - InnovaxSITPublicSubnet1
    Properties:
      SubnetId: !Ref InnovaxSITPublicSubnet1
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - InnovaxSITPublicSubnet2
    Properties:
      SubnetId: !Ref InnovaxSITPublicSubnet2
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
  PublicSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - InnovaxSITPublicSubnet3
    Properties:
      SubnetId: !Ref InnovaxSITPublicSubnet3
      NetworkAclId: !Ref InnovaxSITPublicNetworkAcl
  # Private Network ACL
  InnovaxSITPrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: InnovaxSITVPC
    Properties:
      VpcId: !Ref InnovaxSITVPC
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-private-acl" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref EnvironmentName
      - Key: Created By
        Value: !Ref CreatedBy
  # Private Network ACL Rules      
  InboundPrivateNetworkAclAllowAllICMP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPrivateNetworkAcl
      RuleNumber: !Ref AllowAllIcmpInboundPrivateRuleNumber
      Icmp :
        Code: '-1'
        Type: '-1'
      Protocol: "1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  InboundPrivateNetworkAclAllowAllSsh:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPrivateNetworkAcl
      RuleNumber: !Ref AllowAllSshInboundPrivateRuleNumber
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 172.86.0.0/16
      PortRange:
        From: '22'
        To: '22'
  InboundPrivateNetworkAclAllowVPCSubnets:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPrivateNetworkAcl
      RuleNumber: !Ref AllowAllInboundPrivateRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref VpcCIDR
      PortRange:
        From: '0'
        To: '65535'
  InboundPrivateNetworkAclAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPrivateNetworkAcl
      RuleNumber: !Ref AllowHttpToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundPrivateNetworkAclAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPrivateNetworkAcl
      RuleNumber: !Ref AllowHttpsToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundPrivateNetworkAclAllowReturnTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPrivateNetworkAcl
      RuleNumber: !Ref AllowReturnTrafficToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  InboundPrivateNetworkAclDeny8080:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPrivateNetworkAcl
      RuleNumber: !Ref Allow8080ToPrivateRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8080'
        To: '8080'      
  OutboundPrivateNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: InnovaxSITPrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref InnovaxSITPrivateNetworkAcl
      RuleNumber: !Ref AllowAllOutboundPublicRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  # Private Subnet Association
  PrivateSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - InnovaxSITPrivateSubnet1
    Properties:
      SubnetId: !Ref InnovaxSITPrivateSubnet1
      NetworkAclId: !Ref InnovaxSITPrivateNetworkAcl
  PrivateSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - InnovaxSITPrivateSubnet2
    Properties:
      SubnetId: !Ref InnovaxSITPrivateSubnet2
      NetworkAclId: !Ref InnovaxSITPrivateNetworkAcl
  PrivateSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - InnovaxSITPrivateSubnet3
    Properties:
      SubnetId: !Ref InnovaxSITPrivateSubnet3
      NetworkAclId: !Ref InnovaxSITPrivateNetworkAcl
  ## Create VPC flow log to CloudWatch
  #SitVpcFlowLogsRole:
  #  Condition: VPCFlowLogsToCloudWatchCondition
  #  Type: AWS::IAM::Role
  #  Properties:
  #    Description: Rights to Publish VPC Flow Logs to CloudWatch Logs
  #    AssumeRolePolicyDocument:
  #      Version: 2012-10-17
  #      Statement:
  #        - Effect: Allow
  #          Action: sts:AssumeRole
  #          Principal:
  #            Service:
  #              - vpc-flow-logs.amazonaws.com
  #    Path: /
  #    Policies:
  #      - PolicyName: CloudWatchLogGroup
  #        PolicyDocument:
  #          Version: 2012-10-17
  #          Statement:
  #            - Sid: CloudWatchLogs
  #              Effect: Allow
  #             Action:
  #                - logs:CreateLogStream
  #                - logs:PutLogEvents
  #                - logs:DescribeLogGroups
  #                - logs:DescribeLogStreams
  #              Resource: !GetAtt SitVpcFlowLogsLogGroup.Arn
  #SitVpcFlowLogsLogGroup:
  #  Condition: VPCFlowLogsToCloudWatchCondition
  #  Type: AWS::Logs::LogGroup
  #  Properties:
  #    RetentionInDays: !Ref VPCFlowLogsLogGroupRetention
  #    KmsKeyId: !If
  #      - VPCFlowLogsCloudWatchKMSKeyCondition
  #      - !Ref VPCFlowLogsCloudWatchKMSKey
  #      - !Ref AWS::NoValue
  #SitVpcFlowLogsToCloudWatch:
  #  Condition: VPCFlowLogsToCloudWatchCondition
  #  Type: AWS::EC2::FlowLog
  #  Properties:
  #    LogDestinationType: cloud-watch-logs
  #    LogGroupName: !Ref SitVpcFlowLogsLogGroup
  #    DeliverLogsPermissionArn: !GetAtt SitVpcFlowLogsRole.Arn
  #    LogFormat: !Ref VPCFlowLogsLogFormat
  #    MaxAggregationInterval: !Ref VPCFlowLogsMaxAggregationInterval
  #    ResourceId: !Ref InnovaxSITVPC
  #    ResourceType: InnovaxSITVPC
  #    TrafficType: !Ref VPCFlowLogsTrafficType
  #    Tags:
  #      - Key: Name
  #        Value: VPC Flow Logs CloudWatch
Outputs:
  SitVPC: #VPC
    Description: VPC Id of the Environment
    Value: !Ref 'InnovaxSITVPC'
    Export:
      Name: !Sub ${AWS::StackName}-SitVPC
  SitPublicSubnet1: #Public Subnet
    Description: Public Subnet Id1
    Value: !Ref InnovaxSITPublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-SitPublicSubnet1'
  SitPublicSubnet2: #Public Subnet
    Description: Public Subnet Id2
    Value: !Ref InnovaxSITPublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-SitPublicSubnet2'
  SitPublicSubnet3: #Public Subnet
    Description: Public Subnet Id3
    Value: !Ref InnovaxSITPublicSubnet3
    Export:
      Name: !Sub '${AWS::StackName}-SitPublicSubnet3'
  SitPublicSubnets: #Public Subnet
    Description: Public Subnet Id
    Value: !Join 
        - ','
        - - !Ref InnovaxSITPublicSubnet1
          - !Ref InnovaxSITPublicSubnet2
          - !Ref InnovaxSITPublicSubnet3
    Export:
      Name: !Sub '${AWS::StackName}-SitPublicSubnets'
  SitPrivateSubnet1:
    Description: Private Subnet1 Id1 
    Value: !Ref InnovaxSITPrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-SitPrivateSubnet1
  SitPrivateSubnet2:
    Description: Private Subnet1 Id2
    Value: !Ref InnovaxSITPrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-SitPrivateSubnet2
  SitPrivateSubnet3:
    Description: Private Subnet1 Id3
    Value: !Ref InnovaxSITPrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-SitPrivateSubnet3
  SitPrivateSubnets:
    Description: Private Subnet1 Id 
    Value: !Join 
        - ','
        - - !Ref InnovaxSITPrivateSubnet1
          - !Ref InnovaxSITPrivateSubnet2
          - !Ref InnovaxSITPrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-SitPrivateSubnets
  SitInternetGateway:
    Description: SIT Internet Gateway.
    Value: !Ref 'InnovaxSITInternetGateway'
    Export:
      Name: !Sub ${AWS::StackName}-SitInternetGateway